openapi: 3.0.1
info:
  title: Â¡Pin-it App!
  description: An application to manage projects.
  version: 1.0.0
servers:
  - url: 'https://api.example.com'
tags:
  - name: users
    description: Operations to fetch, add, update, and delete application users.
  - name: projects
    description: Operations to fetch, add, update, and delete a user's projects.
paths:
  /users:
    get:
      tags:
        - users
      operationId: getAllUsers
      summary: Returns a list of users.
      description: Returns a list of all registered users of the application
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                  $ref: "#/components/schemas/UserDTOOut"
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
  /users/auth/signup:
    post:
      tags:
        - users
      operationId: saveNewUser
      summary: Saves a user
      description: Saves a newly registered user to the database
      requestBody:
        description: Un nuevo cliente
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserDTOIn"
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserDTOOut"
        '409':
          description: Conflict Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
  /users/auth/login:
    get:
      tags:
        - users
      operationId: getUserByEmailAndPassword
      summary: Fetches a user
      description: Fetches a registered user by their email and password on login.
      requestBody:
        description: A registered user's email and password
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserLoginDTOIn"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserDTOOut"
        '404':
          description: User Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
  /users/login/{userId}:
    get:
      tags:
        - users
      operationId: getUserById
      summary: Fetches a user
      description: Fetches a registered user by their ID
      parameters:
        - name: userId
          in: path variable
          description: the user's ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserDTOOut"
        '404':
          description: User Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
  /users/{userId}:
    put:
      tags:
        - users
      operationId: updateUserById
      summary: Updates a user
      description: Updates a registered user by their ID
      parameters:
        - name: userId
          in: path variable
          description: the user's ID
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: the updated user details
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserDTOIn"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserDTOOut"
        '404':
          description: User Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        '422':
          description: Constraint Violation Exception
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConstraintViolationError"
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
    delete:
      tags:
        - users
      operationId: deleteUserById
      summary: Deletes a user
      description: Deletes a registered user by their ID
      parameters:
        - name: userId
          in: path variable
          description: the user's ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: the user was successfully deleted from the database
        '404':
          description: User Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
  /projects/{id}:
    get:
      tags:
        - projects
      operationId: getProjectsById
      summary: Returns a user's projects by their ID
      description: Returns a user's projects by their ID
      parameters:
        - name: userId
          in: path variable
          description: the user's ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProjectDTOOut"
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
  /project/{id}:
    get:
      tags:
        - projects
      operationId: getProjectById
      summary: Returns a user's projects by their ID
      description: Returns a user's projects by their ID
      parameters:
        - name: projectId
          in: path variable
          description: the project's ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProjectDTOOut"
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
    put:
      tags:
        - projects
      operationId: updateProjectById
      summary: Updates a user's project by project ID
      description: Updates a user's project by project ID
      parameters:
        - name: projectId
          in: path variable
          description: the project's ID
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: the updated prohect details
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProjectDTOIn"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProjectDTOOut"
        '404':
          description: Project Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        '422':
          description: Constraint Violation Exception
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConstraintViolationError"
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
    delete:
      tags:
        - projects
      operationId: deleteProjectById
      summary: Delete's a user's project by ID
      description: Delete's a user's project by project ID
      parameters:
        - name: projectId
          in: path variable
          description: the project's ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: the user was successfully deleted from the database
        '404':
          description: User Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
components:
  schemas:
    UserLoginDTOIn:
      type: object
      properties:
        email:
          type: string
          example: joebloggs@bloggsy.com
          description: the user's email
        password:
          type: string
          example: "secret"
          description: the user's password
    UserDTOIn:
      type: object
      properties:
        username:
          type: string
          example: "bloggsy"
          description: the user's username
        forename:
          type: string
          example: "Joe"
          description: the user's forename
        surname:
          type: string
          example: "Bloggs"
          description: the user's surname(s)
        email:
          type: string
          example: joebloggs@bloggsy.com
          description: the user's email
        password:
          type: string
          example: "secret"
          description: the user's password
    UserDTOOut:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
          description: the user's unique ID
        forename:
          type: string
          example: "Joe"
          description: the user's forename
        surname:
          type: string
          example: "Bloggs"
          description: the user's surname(s)
        email:
          type: string
          example: joebloggs@bloggsy.com
          description: the user's email
        userProjects:
          type: array
          items:
            allOf:
              - $ref: "#/components/schemas/ProjectDTOOut"
 #       guests:
 #         type: array
 #         items:
 #           allOf:
 #             - $ref: "#/components/schemas/Guest"
    ProjectDTOOut:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
          description: the project's unique ID
      allOf:
        - $ref: "#/components/schemas/ProjectDTOIn"
    ProjectDTOIn:
      type: object
      properties:
        title:
          type: string
          example: "Project Title"
          description: the project's title
        description:
          type: string
          example: "Application testing for pinitapp"
          description: the project's description (optional)
        deadline:
         type: string
         example: "19-03-2024"
         description: the project's deadline (optional)
        creationDate:
          type: string
          example: "19-03-2024"
          description: the project's creation date
        projectStatus:
          type: string
          enum: ["CURRENT", "ARCHIVED"]
          example: "CURRENT"
          description: the project's status
#        tasks:
#          type: array
#          items:
#            allOf:
#              - "#/components/schemas/Task"
#        guests:
#          type: array
#          items:
#            allOf:
#              - "#/components/schemas/Guest"
        projectUsers:
          type: array
          items:
            allOf:
              - $ref: "#/components/schemas/ProjectUsersDTOOut"
    ProjectUsersDTOOut:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
          description: the id for the join table for Projects and Users
        project:
          type: object
          items:
            allOf:
              - $ref: "#/components/schemas/ProjectDTOOut"
        user:
          type: object
          items:
            allOf:
              - $ref: "#/components/schemas/UserDTOOut"
        permissions:
          type: string
          enum: [OWNER, EDITOR, READ_ONLY]
          example: "OWNER"
          description: the user's permissions for a specified project
    ConstraintViolationError:
      type: object
      properties:
        type:
          type: string
          example: "VALIDATION ERROR: UNPROCESSEABLE ENTITY",
          description: description of the error
        errorsList:
          type: array
          items:
            allOf:
              - $ref: "#/components/schemas/ValidationErrorModel"
    ValidationErrorModel:
      type: object
      properties:
        timestamp:
          type: string
          example: "2024-10-20T17:24:41.231+00:00"
          description: the timestamp for the error
        constraint:
          type: string
          example: "422"
          description: the http status code
        detail:
          type: string
          example: "Password must contain minimum 8 characters, including at least 1 digit and 1 special character; the maximum length is of 25 characters"
          description: description of the error
        mapping:
          type: string
          example: "password"
          description: brief explanation of the cause fo the constraint error
    ErrorResponse:
      type: object
      properties:
        code:
          type: string
          example: 404
          description: the status code
        errorType:
          type: string
          example: User Not Found Error
          description: identifies the error type
        message:
          type: string
          example: "Client not found with id: 55"
          description: a description of the error
    InternalServerError:
      type: object
      properties:
        timestamp:
          type: string,
          example: "2024-10-20T16:23:49.004+00:00"
          description: time error registered
        status:
          type: number
          format: int32
          example: 500
          description: HTTP error code for an internal server error
        path:
          type: string
          example: "/users/registration"
          description: the path on which the internal server error occurred










